/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules/workbox-routing
// for more information about Workbox routing.

import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, CacheFirst, NetworkFirst } from 'workbox-strategies';
import { BackgroundSyncPlugin } from 'workbox-background-sync';
import { Queue } from 'workbox-background-sync';

declare const self: ServiceWorkerGlobalScope;

clientsClaim();

// Create a background sync queue for API requests that failed while offline
const foodEntryQueue = new Queue('foodEntryQueue', {
  maxRetentionTime: 24 * 60, // Retry for up to 24 hours (in minutes)
  onSync: async ({ queue }) => {
    let entry;
    while ((entry = await queue.shiftRequest())) {
      try {
        await fetch(entry.request);
        console.log('Replay successful for request', entry.request.url);
        
        // Notify any open windows about the successful sync
        const clients = await self.clients.matchAll({ type: 'window' });
        for (const client of clients) {
          client.postMessage({
            type: 'BACKGROUND_SYNC_COMPLETED',
            url: entry.request.url,
          });
        }
      } catch (error) {
        console.error('Replay failed for request', entry.request.url, error);
        
        // Put the entry back in the queue and re-throw the error
        await queue.unshiftRequest(entry);
        throw error;
      }
    }
    console.log('Background sync complete!');
    
    // Notify any open clients that all background syncs are complete
    const clients = await self.clients.matchAll({ type: 'window' });
    for (const client of clients) {
      client.postMessage({
        type: 'ALL_BACKGROUND_SYNCS_COMPLETED',
      });
    }
  },
});

// Background sync plugin for Workbox
const bgSyncPlugin = new BackgroundSyncPlugin('foodEntryQueue', {
  maxRetentionTime: 24 * 60 // Retry for up to 24 hours (in minutes)
});

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith('/_')) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// Special handling for API mutations (POST, PUT, DELETE)
registerRoute(
  ({ url, request }) => url.pathname.startsWith('/api/') && 
                      ['POST', 'PUT', 'DELETE'].includes(request.method),
  new NetworkFirst({
    cacheName: 'api-mutations',
    plugins: [
      bgSyncPlugin, // Add background sync for offline mutations
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 30 * 24 * 60 * 60,
        purgeOnQuotaError: true,
      }),
    ],
  })
);

// Regular API requests with a Network First strategy (GET requests)
registerRoute(
  ({ url, request }) => url.pathname.startsWith('/api/') && 
                      request.method === 'GET',
  new NetworkFirst({
    cacheName: 'api-cache',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 30 * 24 * 60 * 60,
        purgeOnQuotaError: true,
      }),
    ],
  })
);

// Cache static assets with a Cache First strategy
registerRoute(
  ({ request }) => request.destination === 'style' || 
                 request.destination === 'script' || 
                 request.destination === 'font',
  new CacheFirst({
    cacheName: 'static-resources',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
        purgeOnQuotaError: true,
      }),
    ],
  })
);

// Cache images with a Stale While Revalidate strategy
registerRoute(
  ({ request }) => request.destination === 'image',
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 days
        purgeOnQuotaError: true,
      }),
    ],
  })
);

// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
  
  // Manual sync trigger
  if (event.data && event.data.type === 'SYNC_FOOD_ENTRIES') {
    console.log('Manual sync triggered');
    self.registration.sync.register('foodEntrySync').catch(err => {
      console.error('Background sync registration failed:', err);
    });
  }
});

// Register for sync events
self.addEventListener('sync', (event) => {
  if (event.tag === 'foodEntrySync') {
    event.waitUntil(foodEntryQueue.replayRequests());
  }
});

// Add offline fallback page handling
const FALLBACK_HTML_URL = '/offline.html';
self.addEventListener('install', event => {
  const cacheFallback = async () => {
    const cache = await caches.open('offline-fallback');
    await cache.add(new Request(FALLBACK_HTML_URL, { cache: 'reload' }));
  };

  event.waitUntil(cacheFallback());
});

// Enhanced fetch handler
self.addEventListener('fetch', event => {
  // Handle API mutation requests specifically when offline
  if (
    event.request.url.includes('/api/') &&
    ['POST', 'PUT', 'DELETE'].includes(event.request.method)
  ) {
    // Clone the request to save it in the background sync queue if it fails
    const requestClone = event.request.clone();
    
    event.respondWith(
      fetch(event.request).catch(error => {
        console.log('Network request failed, saving to background sync queue', error);
        
        // Add to background sync queue
        foodEntryQueue.pushRequest({ request: requestClone });
        
        // Return a custom response for the user
        return new Response(JSON.stringify({
          success: false,
          message: 'You are offline. This action will be completed when you reconnect.',
          offlineQueued: true
        }), {
          headers: { 'Content-Type': 'application/json' }
        });
      })
    );
    return;
  }
  
  // Special handling for navigation requests
  if (event.request.mode === 'navigate') {
    event.respondWith(
      (async () => {
        try {
          // First, try to use the navigation preload response if it's supported
          const preloadResponse = await event.preloadResponse;
          if (preloadResponse) {
            return preloadResponse;
          }

          // Always try the network first
          return await fetch(event.request);
        } catch (error) {
          // If offline, get the cached HTML
          const cache = await caches.open('offline-fallback');
          const cachedResponse = await cache.match(FALLBACK_HTML_URL);
          return cachedResponse;
        }
      })()
    );
  }
});